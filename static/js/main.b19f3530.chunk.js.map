{"version":3,"sources":["recipes.module.css","recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","cal","className","style","recipe","map","items","text","substring","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","exampleReq","useEffect","getRecipes","a","fetch","response","json","data","hits","textAlign","margin","color","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,wBAAwB,MAAQ,uBAAuB,MAAQ,yB,qNCqB3EC,EAnBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACpCC,EAAM,GAAKH,EACf,OACE,yBAAKI,UAAWC,IAAMC,QACpB,wBAAIF,UAAWC,IAAMN,OAAQA,GAC7B,4BACGG,EAAYK,KAAI,SAACC,GAAD,OACf,4BAAKA,EAAMC,UAGf,2BACE,yCACCN,EAAIO,UAAU,EAAG,IAEpB,yBAAKN,UAAWC,IAAMJ,MAAOU,IAAKV,EAAOW,IAAI,OCiDpCC,EA9DH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEYF,mBAAS,IAFrB,mBAETG,EAFS,KAEDC,EAFC,OAGUJ,mBAAS,WAHnB,mBAGTK,EAHS,KAGFC,EAHE,KAOVC,EAAU,0CAAsCF,EAAtC,mBAFD,WAEC,oBADA,oCAGhBG,qBAAU,WACRC,MACC,CAACJ,IAEJ,IAMMI,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAMJ,GADZ,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAHC,2CAAH,qDAWhB,OACE,yBAAKzB,UAAU,OACb,wBAAIC,MAAO,CAAEyB,UAAW,SAAUC,OAAQ,gBAAiBC,MAAO,KAAlE,+CAGA,0BAAMC,SAtBQ,SAACC,GACjBA,EAAEC,iBACFf,EAASH,GACTC,EAAU,KAmBmBd,UAAU,eACnC,2BACEA,UAAU,aACVgC,KAAK,OACLC,YAAY,oCACZC,MAAOrB,EACPsB,SAfa,SAACL,GACpBhB,EAAUgB,EAAEM,OAAOF,UAgBf,4BAAQlC,UAAU,gBAAgBgC,KAAK,UAAvC,WAIF,yBAAKhC,UAAU,WACZW,EAAQR,KAAI,SAACQ,GAAD,OACX,kBAAC,EAAD,CACE0B,IAAK1B,EAAQT,OAAOoC,MACpB3C,MAAOgB,EAAQT,OAAOoC,MACtB1C,SAAUe,EAAQT,OAAON,SACzBC,MAAOc,EAAQT,OAAOL,MACtBC,YAAaa,EAAQT,OAAOJ,oBC9CpByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b19f3530.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipes_recipe__j1ZGE\",\"image\":\"recipes_image__2lIVN\",\"title\":\"recipes_title__2EAEM\"};","import React from \"react\";\r\nimport style from \"./recipes.module.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  var cal = \"\" + calories;\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1 className={style.title}>{title}</h1>\r\n      <ol>\r\n        {ingredients.map((items) => (\r\n          <li>{items.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>\r\n        <b>Calories: </b>\r\n        {cal.substring(0, 7)}\r\n      </p>\r\n      <img className={style.image} src={image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./recipe.js\";\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  const APP_ID = \"aac69d6b\";\n  const APP_KEY = \"8de6d4e518e378438b5b7cd1cafd3df8\";\n  const exampleReq = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  const getRecipes = async () => {\n    const response = await fetch(exampleReq);\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n  //console.log(recipes.length + \" \");\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h2 style={{ textAlign: \"center\", margin: \"0vh 0px 2vh 0\", color: \"\" }}>\n        Hi! Search your desired cuisine here &#8595;\n      </h2>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          placeholder=\"Enter your favorite ingredient...\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipes) => (\n          <Recipe\n            key={recipes.recipe.label}\n            title={recipes.recipe.label}\n            calories={recipes.recipe.calories}\n            image={recipes.recipe.image}\n            ingredients={recipes.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}